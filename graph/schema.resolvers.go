package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.27

import (
	"context"
	"fmt"

	"github.com/FaresAbuIram/COVID19-Statistics/graph/model"
)

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, input model.RegisterInput) (bool, error) {
	return r.UserService.CreateNewUser(input.Email, input.Password)
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginInput) (string, error) {
	return r.UserService.Login(input.Email, input.Password)
}

// AddCountry is the resolver for the addCountry field.
func (r *mutationResolver) AddCountry(ctx context.Context, input *model.CountryInput) (bool, error) {
	fmt.Println("afsasf")
	return r.Covid19Service.AddCountry(input.Name, input.UserID)
}

// List is the resolver for the list field.
func (r *queryResolver) List(ctx context.Context) ([]*model.Country, error) {
	panic(fmt.Errorf("not implemented: List - list"))
}

// DailyPercentageeOfDeathToConfirmed is the resolver for the dailyPercentageeOfDeathToConfirmed field.
func (r *queryResolver) DailyPercentageeOfDeathToConfirmed(ctx context.Context, name string) (float64, error) {
	panic(fmt.Errorf("not implemented: DailyPercentageeOfDeathToConfirmed - dailyPercentageeOfDeathToConfirmed"))
}

// GetTopThreeCountries is the resolver for the getTopThreeCountries field.
func (r *queryResolver) GetTopThreeCountries(ctx context.Context, typeArg string) ([]*model.CountryResponse, error) {
	panic(fmt.Errorf("not implemented: GetTopThreeCountries - getTopThreeCountries"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
