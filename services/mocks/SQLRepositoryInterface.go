// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	entity "github.com/FaresAbuIram/COVID19-Statistics/entity"
	mock "github.com/stretchr/testify/mock"

	model "github.com/FaresAbuIram/COVID19-Statistics/graph/model"
)

// SQLRepositoryInterface is an autogenerated mock type for the SQLRepositoryInterface type
type SQLRepositoryInterface struct {
	mock.Mock
}

// CountriesCountByname provides a mock function with given fields: name
func (_m *SQLRepositoryInterface) CountriesCountByname(name string) (int, error) {
	ret := _m.Called(name)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserByEmail provides a mock function with given fields: email
func (_m *SQLRepositoryInterface) FindUserByEmail(email string) (int, []byte, error) {
	ret := _m.Called(email)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 []byte
	if rf, ok := ret.Get(1).(func(string) []byte); ok {
		r1 = rf(email)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(email)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAllCountries provides a mock function with given fields:
func (_m *SQLRepositoryInterface) GetAllCountries() (map[int]string, error) {
	ret := _m.Called()

	var r0 map[int]string
	if rf, ok := ret.Get(0).(func() map[int]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllCountriesByUserId provides a mock function with given fields: userId
func (_m *SQLRepositoryInterface) GetAllCountriesByUserId(userId int) ([]*model.Country, error) {
	ret := _m.Called(userId)

	var r0 []*model.Country
	if rf, ok := ret.Get(0).(func(int) []*model.Country); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Country)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllStatistics provides a mock function with given fields:
func (_m *SQLRepositoryInterface) GetAllStatistics() ([]entity.Statistics, error) {
	ret := _m.Called()

	var r0 []entity.Statistics
	if rf, ok := ret.Get(0).(func() []entity.Statistics); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Statistics)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCountryIdByName provides a mock function with given fields: name
func (_m *SQLRepositoryInterface) GetCountryIdByName(name string) (int, error) {
	ret := _m.Called(name)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPercentageOfDeathToConfirmedByCountryName provides a mock function with given fields: userId, countryName
func (_m *SQLRepositoryInterface) GetPercentageOfDeathToConfirmedByCountryName(userId int, countryName string) (float64, error) {
	ret := _m.Called(userId, countryName)

	var r0 float64
	if rf, ok := ret.Get(0).(func(int, string) float64); ok {
		r0 = rf(userId, countryName)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(userId, countryName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTopThreeCountriesByUserIdAndType provides a mock function with given fields: userId, status
func (_m *SQLRepositoryInterface) GetTopThreeCountriesByUserIdAndType(userId int, status string) ([]*model.Country, error) {
	ret := _m.Called(userId, status)

	var r0 []*model.Country
	if rf, ok := ret.Get(0).(func(int, string) []*model.Country); ok {
		r0 = rf(userId, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Country)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(userId, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertCountry provides a mock function with given fields: name
func (_m *SQLRepositoryInterface) InsertCountry(name string) (int, error) {
	ret := _m.Called(name)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertIntoUsersCountries provides a mock function with given fields: userId, countryId
func (_m *SQLRepositoryInterface) InsertIntoUsersCountries(userId int, countryId int) error {
	ret := _m.Called(userId, countryId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(userId, countryId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertNewUser provides a mock function with given fields: email, password
func (_m *SQLRepositoryInterface) InsertNewUser(email string, password []byte) error {
	ret := _m.Called(email, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte) error); ok {
		r0 = rf(email, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertStatistic provides a mock function with given fields: countryId
func (_m *SQLRepositoryInterface) InsertStatistic(countryId int) error {
	ret := _m.Called(countryId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(countryId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateArrayOfStatistics provides a mock function with given fields: statistics
func (_m *SQLRepositoryInterface) UpdateArrayOfStatistics(statistics []entity.Statistics) {
	_m.Called(statistics)
}

// UsersCountByEmail provides a mock function with given fields: email
func (_m *SQLRepositoryInterface) UsersCountByEmail(email string) (int, error) {
	ret := _m.Called(email)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersCountById provides a mock function with given fields: userId
func (_m *SQLRepositoryInterface) UsersCountById(userId int) (int, error) {
	ret := _m.Called(userId)

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSQLRepositoryInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewSQLRepositoryInterface creates a new instance of SQLRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSQLRepositoryInterface(t mockConstructorTestingTNewSQLRepositoryInterface) *SQLRepositoryInterface {
	mock := &SQLRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
